#!/bin/bash
# Generated by Claude 3.5 üë©‚Äçüíª

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to show usage
show_usage() {
    echo -e "Usage: $0 -u|--username <github_username> [-b|--branch <branch_name>] [-r|--remote <remote_name>]"
    echo -e "\nExample:"
    echo -e "  $0 --username johndoe --branch develop --remote fork"
    exit 1
}

# Parse command line arguments
GITHUB_USERNAME=""
BRANCH="main"      # Default branch name
REMOTE="personal"  # Default remote name

while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--username)
            GITHUB_USERNAME="$2"
            shift 2
            ;;
        -b|--branch)
            BRANCH="$2"
            shift 2
            ;;
        -r|--remote)
            REMOTE="$2"
            shift 2
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            show_usage
            ;;
    esac
done

# Validate required parameters
if [ -z "$GITHUB_USERNAME" ]; then
    echo -e "${RED}Error: GitHub username is required${NC}"
    show_usage
fi

# Function to push a submodule
push_submodule() {
    local submodule_path=$1
    local remote_url=$2
    local branch=$3

    echo -e "${GREEN}Processing ${submodule_path}...${NC}"
    
    # Enter the submodule directory
    cd "$submodule_path" || {
        echo -e "${RED}Failed to enter ${submodule_path}${NC}"
        return 1
    }

    # Check if the remote already exists
    if ! git remote | grep -q "^${REMOTE}$"; then
        echo "Adding ${REMOTE} remote for ${submodule_path}"
        git remote add "${REMOTE}" "$remote_url"
    else
        echo "Updating ${REMOTE} remote URL for ${submodule_path}"
        git remote set-url "${REMOTE}" "$remote_url"
    fi

    # Push to the remote
    echo "Pushing to ${REMOTE} remote..."
    if git push "${REMOTE}" "HEAD:${branch}" --force; then
        echo -e "${GREEN}Successfully pushed ${submodule_path} to ${remote_url}${NC}"
    else
        echo -e "${RED}Failed to push ${submodule_path}${NC}"
    fi

    # Return to parent directory
    cd - > /dev/null
}

# First push all submodules
push_submodule "rbuilder" "https://github.com/${GITHUB_USERNAME}/rbuilder.git" "${BRANCH}"
push_submodule "reth" "https://github.com/${GITHUB_USERNAME}/gwyneth.git" "${BRANCH}"
push_submodule "revm" "https://github.com/${GITHUB_USERNAME}/revm.git" "${BRANCH}"
push_submodule "revm-inspectors" "https://github.com/${GITHUB_USERNAME}/revm-inspectors.git" "${BRANCH}"
push_submodule "ethereum-package" "https://github.com/${GITHUB_USERNAME}/ethereum-package.git" "${BRANCH}"

# Now push the root repository (gwyneth-mono)
echo -e "${GREEN}Processing root repository...${NC}"

# Check if the remote already exists for root repo
if ! git remote | grep -q "^${REMOTE}$"; then
    echo "Adding ${REMOTE} remote for root repository"
    git remote add "${REMOTE}" "https://github.com/${GITHUB_USERNAME}/gwyneth-mono.git"
else
    echo "Updating ${REMOTE} remote URL for root repository"
    git remote set-url "${REMOTE}" "https://github.com/${GITHUB_USERNAME}/gwyneth-mono.git"
fi

# Push the root repository
echo "Pushing root repository to ${REMOTE} remote..."
if git push "${REMOTE}" "HEAD:${BRANCH}" --force; then
    echo -e "${GREEN}Successfully pushed root repository${NC}"
else
    echo -e "${RED}Failed to push root repository${NC}"
fi

echo -e "${GREEN}All repositories have been processed${NC}"